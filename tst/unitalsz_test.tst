gap> START_TEST("UnitalSZ package: unitalsz_test.tst");
gap> SizeScreen([72,23]);
[ 72, 23 ]
gap> 
gap> LoadPackage("unitalsz", false);
true
gap> 
gap> ###################################
gap> 
gap> her := HermitianAbstractUnital( 4 );
HermitianAbstractUnital(4)
gap> KnownAttributesOfObject( her );
[ "Name", "Order", "PointsOfIncidenceStructure", 
  "BlocksOfIncidenceStructure" ]
gap> 
gap> knps := List( [ 1..NumberOfAbstractUnitalsInLibrary("KNP") ], i -> KNPAbstractUnital( i ) );;
gap> knps[ 4 ];
KNPAbstractUnital(4)
gap> List( knps, AutomorphismGroup );;
gap> Collected( List( knps, x -> Size( AutomorphismGroup( x ) ) ) );
[ [ 4, 4 ], [ 8, 12 ], [ 12, 2 ], [ 13, 62 ], [ 16, 12 ], [ 20, 2 ], 
  [ 24, 8 ], [ 32, 57 ], [ 39, 1277 ], [ 48, 7 ], [ 50, 24 ], 
  [ 64, 67 ], [ 78, 4 ], [ 80, 2 ], [ 96, 5 ], [ 100, 89 ], 
  [ 128, 82 ], [ 150, 2 ], [ 156, 1 ], [ 192, 8 ], [ 200, 17 ], 
  [ 256, 12 ], [ 260, 1 ], [ 300, 10 ], [ 384, 1 ], [ 600, 3 ], 
  [ 768, 3 ], [ 780, 1 ], [ 1200, 1 ], [ 249600, 1 ] ]
gap> 
gap> Isomorphism( her, knps[ 1 ] );
(2,5,34,40,33,37,29,17,47,54,10,59,64,4,39,50,55)(3,9,60,23,28,19,13,
49,46,6,11,31,58,30,52,53,32,8,56,24,35,63,7,38,57,48,36,21,27,44,45,
41,18,61,62,20,43,42,65)(14,16)(25,26,51)
gap> Isomorphism( her, knps[ 2 ] );
fail
gap> 
gap> u:=knps[9];
KNPAbstractUnital(9)
gap> fp:=FullPointsOfUnitalRepresentatives(u);;
gap> List(fp,r->Size(r.fullpts));
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 
  1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
  1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 5, 1, 
  5, 5, 5, 1, 1, 1, 1, 1, 5 ]
gap> 
gap> for r in fp do
>     if Length(r.fullpts)>1 then
>         g:=PerspectivityGroupOfUnitalsBlocks(u,r.block1,r.block2,r.fullpts);
>         Print("# ",Size(Intersection(r.block1,r.block2))," ",StructureDescription(g)," ", NrMovedPoints(g), "\n");
>     fi;
> od;
# 0 C2 4
# 0 C5 5
# 0 C5 5
# 0 S5 5
# 0 C5 5
# 0 C5 5
# 0 S5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
# 0 C5 5
gap> 
gap> ###################################
gap> 
gap> BagchiBagchiCyclicUnital(3);
fail
gap> BagchiBagchiCyclicUnital(7);
fail
gap> u4:=BagchiBagchiCyclicUnital(4);
BagchiBagchiCyclicUnital(4)
gap> u6:=BagchiBagchiCyclicUnital(6);
BagchiBagchiCyclicUnital(6)
gap> 
gap> a:=AutomorphismGroup(u6);
<permutation group with 3 generators>
gap> Size(a);
6510
gap> StructureDescription(a);
"C7 : (C31 : C30)"
gap> OrbitLengths(AutomorphismGroup(u6),BlocksOfUnital(u6),OnSets);
[ 1085, 31 ]
gap> 
gap> FullPointsOfUnitalRepresentatives(u6);
[  ]
gap> 
gap> ###################################
gap> 
gap> q := 2^3;
8
gap> params := AllBuekenhoutMetzAbstractUnitalParameters(q);;
gap> Length(params);
1
gap> 
gap> bm_unital :=  OrthogonalBuekenhoutMetzAbstractUnital(q,params[1][1],params[1][2]);
OrthogonalBuekenhoutMetzAbstractUnital(8,Z(2^6)^62,Z(2^6)^60)
gap> ag := AutomorphismGroup(bm_unital);
<permutation group with 5 generators>
gap> OrbitLengths(ag);
[ 512 ]
gap> 
gap> bt_unital := BuekenhoutTitsAbstractUnital(q);
BuekenhoutTitsAbstractUnital(8)
gap> 
gap> ag := AutomorphismGroup(bt_unital);
<permutation group with 7 generators>
gap> OrbitLengths(ag);
[ 384, 128 ]
gap> 
gap> ###################################
gap> bls := [ [1,2,55,64,65],   [1,3,32,46,63],   [1,4,7,34,45],    [1,5,11,31,44],
>          [1,6,12,19,54],   [1,8,38,47,50],   [1,9,24,27,40],   [1,10,20,48,53],
>          [1,13,17,49,57],  [1,14,15,16,29],  [1,18,33,43,58],  [1,21,23,25,37],
>          [1,22,51,56,60],  [1,26,30,39,52],  [1,28,36,41,62],  [1,35,42,59,61],
>          [2,3,6,30,58],    [2,4,14,54,60],   [2,5,29,46,47],   [2,7,13,48,59],
>          [2,8,34,37,40],   [2,9,10,18,31],   [2,11,19,32,52],  [2,12,20,50,57],
>          [2,15,21,43,62],  [2,16,23,27,28],  [2,17,33,45,61],  [2,22,24,25,26],
>          [2,35,38,39,41],  [2,36,49,53,56],  [2,42,44,51,63],  [3,4,19,23,33],
>          [3,5,10,39,59],   [3,7,22,49,52],   [3,8,14,48,65],   [3,9,25,29,60],
>          [3,11,15,20,34],  [3,12,13,16,61],  [3,17,24,28,44],  [3,18,47,53,57],
>          [3,21,36,40,42],  [3,26,37,38,43],  [3,27,35,56,64],  [3,31,45,55,62],
>          [3,41,50,51,54],  [4,5,41,52,53],   [4,6,26,31,47],   [4,8,16,36,57],
>          [4,9,56,58,59],   [4,10,28,46,65],  [4,11,21,50,64],  [4,12,35,44,62],
>          [4,13,30,32,51],  [4,15,37,39,61],  [4,17,18,20,25],  [4,22,27,38,48],
>          [4,24,42,49,55],  [4,29,40,43,63],  [5,6,7,32,37],    [5,8,42,54,58],
>          [5,9,12,17,51],   [5,13,27,36,63],  [5,14,22,61,62],  [5,15,25,40,49],
>          [5,16,19,20,26],  [5,18,21,28,38],  [5,23,30,55,60],  [5,24,33,48,64],
>          [5,34,35,57,65],  [5,43,45,50,56],  [6,8,56,62,63],   [6,9,21,61,65],
>          [6,10,14,40,41],  [6,11,25,43,51],  [6,13,38,44,55],  [6,15,42,46,57],
>          [6,16,22,34,64],  [6,17,23,36,52],  [6,18,48,49,60],  [6,20,28,45,59],
>          [6,24,35,50,53],  [6,27,29,33,39],  [7,8,20,24,51],   [7,9,41,63,64],
>          [7,10,11,42,60],  [7,12,15,55,56],  [7,14,23,26,35],  [7,16,44,46,53],
>          [7,17,29,38,62],  [7,18,19,39,50],  [7,21,27,31,57],  [7,25,47,58,65],
>          [7,28,30,33,40],  [7,36,43,54,61],  [8,9,11,13,46],   [8,10,12,45,52],
>          [8,15,18,27,59],  [8,17,21,35,60],  [8,19,43,49,64],  [8,22,29,30,53],
>          [8,23,32,39,44],  [8,25,31,33,41],  [8,26,28,55,61],  [9,14,52,55,57],
>          [9,15,19,28,53],  [9,16,35,43,47],  [9,20,22,36,39],  [9,23,48,50,62],
>          [9,26,32,33,42],  [9,30,34,38,54],  [9,37,44,45,49],  [10,13,23,34,43],
>          [10,15,17,30,64], [10,16,21,32,56], [10,19,25,35,55], [10,22,33,54,57],
>          [10,24,36,37,47], [10,26,27,51,62], [10,29,44,50,61], [10,38,49,58,63],
>          [11,12,33,38,59], [11,14,39,47,56], [11,16,18,54,62], [11,17,22,41,65],
>          [11,23,24,29,57], [11,26,36,45,48], [11,27,30,49,61], [11,28,35,37,63],
>          [11,40,53,55,58], [12,14,24,30,43], [12,18,23,42,65], [12,21,26,41,49],
>          [12,22,28,32,47], [12,25,34,48,63], [12,27,37,53,60], [12,29,31,36,58],
>          [12,39,40,46,64], [13,14,21,33,53], [13,15,41,45,47], [13,18,26,29,64],
>          [13,19,24,31,56], [13,20,35,52,58], [13,22,37,42,50], [13,25,28,39,54],
>          [13,40,60,62,65], [14,17,19,59,63], [14,18,37,46,51], [14,20,31,38,42],
>          [14,25,36,44,64], [14,27,32,45,58], [14,28,34,49,50], [15,22,23,31,63],
>          [15,24,32,38,65], [15,26,50,58,60], [15,33,35,36,51], [15,44,48,52,54],
>          [16,17,37,48,58], [16,24,41,59,60], [16,25,30,42,45], [16,31,39,49,65],
>          [16,33,50,55,63], [16,38,40,51,52], [17,26,34,46,56], [17,27,47,54,55],
>          [17,31,32,40,50], [17,39,42,43,53], [18,22,35,40,45], [18,24,52,61,63],
>          [18,30,41,44,56], [18,32,34,36,55], [19,21,22,44,58], [19,27,34,41,42],
>          [19,29,45,51,65], [19,30,37,57,62], [19,36,38,46,60], [19,40,47,48,61],
>          [20,21,30,47,63], [20,23,40,54,56], [20,27,43,44,65], [20,29,37,41,55],
>          [20,32,60,61,64], [20,33,46,49,62], [21,24,45,46,54], [21,29,34,52,59],
>          [21,39,48,51,55], [22,43,46,55,59], [23,38,45,53,64], [23,41,46,58,61],
>          [23,47,49,51,59], [24,34,39,58,62], [25,27,46,50,52], [25,32,53,59,62],
>          [25,38,56,57,61], [26,40,44,57,59], [26,53,54,63,65], [28,29,42,48,56],
>          [28,31,43,52,60], [28,51,57,58,64], [29,32,35,49,54], [30,31,35,46,48],
>          [30,36,50,59,65], [31,34,51,53,61], [31,37,54,59,64], [32,41,43,48,57],
>          [33,34,44,47,60], [33,37,52,56,65], [39,45,57,60,63], [42,47,52,62,64]];;
gap> u := AbstractUnitalByDesignBlocks( bls );
AbstractUnital<4>
gap> ed3nets := EmbeddedDual3NetsOfUnitalRepresentatives( u );
[ [ [ 1, 2, 55, 64, 65 ], [ 3, 5, 10, 39, 59 ], 
      [ 30, 31, 35, 46, 48 ] ], 
  [ [ 1, 2, 55, 64, 65 ], [ 4, 8, 16, 36, 57 ], 
      [ 14, 28, 34, 49, 50 ] ], 
  [ [ 1, 13, 17, 49, 57 ], [ 3, 41, 50, 51, 54 ], 
      [ 12, 22, 28, 32, 47 ] ], 
  [ [ 1, 13, 17, 49, 57 ], [ 4, 15, 37, 39, 61 ], 
      [ 16, 25, 30, 42, 45 ] ], 
  [ [ 2, 16, 23, 27, 28 ], [ 4, 5, 41, 52, 53 ], 
      [ 19, 36, 38, 46, 60 ] ], 
  [ [ 3, 4, 19, 23, 33 ], [ 13, 15, 41, 45, 47 ], 
      [ 31, 34, 51, 53, 61 ] ], 
  [ [ 3, 5, 10, 39, 59 ], [ 4, 17, 18, 20, 25 ], 
      [ 9, 15, 19, 28, 53 ] ], 
  [ [ 3, 5, 10, 39, 59 ], [ 6, 8, 56, 62, 63 ], 
      [ 14, 27, 32, 45, 58 ] ], 
  [ [ 3, 5, 10, 39, 59 ], [ 7, 36, 43, 54, 61 ], 
      [ 13, 22, 37, 42, 50 ] ], 
  [ [ 3, 5, 10, 39, 59 ], [ 12, 21, 26, 41, 49 ], 
      [ 16, 38, 40, 51, 52 ] ], 
  [ [ 3, 7, 22, 49, 52 ], [ 4, 11, 21, 50, 64 ], 
      [ 19, 27, 34, 41, 42 ] ], 
  [ [ 3, 7, 22, 49, 52 ], [ 15, 33, 35, 36, 51 ], 
      [ 20, 23, 40, 54, 56 ] ], 
  [ [ 3, 8, 14, 48, 65 ], [ 4, 5, 41, 52, 53 ], 
      [ 10, 22, 33, 54, 57 ] ], 
  [ [ 3, 9, 25, 29, 60 ], [ 14, 28, 34, 49, 50 ], 
      [ 15, 44, 48, 52, 54 ] ], 
  [ [ 3, 11, 15, 20, 34 ], [ 9, 26, 32, 33, 42 ], 
      [ 19, 36, 38, 46, 60 ] ], 
  [ [ 3, 26, 37, 38, 43 ], [ 4, 8, 16, 36, 57 ], 
      [ 19, 40, 47, 48, 61 ] ], 
  [ [ 4, 5, 41, 52, 53 ], [ 6, 11, 25, 43, 51 ], 
      [ 17, 31, 32, 40, 50 ] ], 
  [ [ 4, 6, 26, 31, 47 ], [ 14, 17, 19, 59, 63 ], 
      [ 20, 23, 40, 54, 56 ] ], 
  [ [ 4, 13, 30, 32, 51 ], [ 5, 14, 22, 61, 62 ], 
      [ 12, 27, 37, 53, 60 ] ] ]
gap> ls := List( ed3nets, t -> LatinSquareOfEmbeddedDual3Net( u, t ) );
[ [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 1, 5, 4 ], [ 3, 4, 5, 1, 2 ], 
      [ 4, 5, 2, 3, 1 ], [ 5, 1, 4, 2, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 1, 5, 3 ], [ 3, 1, 5, 2, 4 ], 
      [ 4, 5, 2, 3, 1 ], [ 5, 3, 4, 1, 2 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5, 1 ], [ 3, 4, 5, 1, 2 ], 
      [ 4, 5, 1, 2, 3 ], [ 5, 1, 2, 3, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 1, 3, 4 ], [ 3, 1, 4, 5, 2 ], 
      [ 4, 3, 5, 2, 1 ], [ 5, 4, 2, 1, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5, 1 ], [ 3, 4, 5, 1, 2 ], 
      [ 4, 5, 1, 2, 3 ], [ 5, 1, 2, 3, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 4, 1, 3 ], [ 3, 4, 2, 5, 1 ], 
      [ 4, 1, 5, 3, 2 ], [ 5, 3, 1, 2, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 5, 1, 4 ], [ 3, 5, 4, 2, 1 ], 
      [ 4, 1, 2, 5, 3 ], [ 5, 4, 1, 3, 2 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 1, 3, 4 ], [ 3, 1, 4, 5, 2 ], 
      [ 4, 3, 5, 2, 1 ], [ 5, 4, 2, 1, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 5, 1, 4 ], [ 3, 5, 4, 2, 1 ], 
      [ 4, 1, 2, 5, 3 ], [ 5, 4, 1, 3, 2 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 5, 1, 4 ], [ 3, 5, 4, 2, 1 ], 
      [ 4, 1, 2, 5, 3 ], [ 5, 4, 1, 3, 2 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5, 1 ], [ 3, 4, 5, 1, 2 ], 
      [ 4, 5, 1, 2, 3 ], [ 5, 1, 2, 3, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 1, 5, 3 ], [ 3, 1, 5, 2, 4 ], 
      [ 4, 5, 2, 3, 1 ], [ 5, 3, 4, 1, 2 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 4, 1, 3 ], [ 3, 4, 2, 5, 1 ], 
      [ 4, 1, 5, 3, 2 ], [ 5, 3, 1, 2, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 5, 3, 1 ], [ 3, 5, 2, 1, 4 ], 
      [ 4, 3, 1, 5, 2 ], [ 5, 1, 4, 2, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 5, 3, 1 ], [ 3, 5, 2, 1, 4 ], 
      [ 4, 3, 1, 5, 2 ], [ 5, 1, 4, 2, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 4, 1, 3 ], [ 3, 4, 2, 5, 1 ], 
      [ 4, 1, 5, 3, 2 ], [ 5, 3, 1, 2, 4 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 5, 3, 1 ], [ 3, 5, 2, 1, 4 ], 
      [ 4, 3, 1, 5, 2 ], [ 5, 1, 4, 2, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 4, 5, 3, 1 ], [ 3, 5, 2, 1, 4 ], 
      [ 4, 3, 1, 5, 2 ], [ 5, 1, 4, 2, 3 ] ], 
  [ [ 1, 2, 3, 4, 5 ], [ 2, 5, 4, 1, 3 ], [ 3, 4, 2, 5, 1 ], 
      [ 4, 1, 5, 3, 2 ], [ 5, 3, 1, 2, 4 ] ] ]
gap> List( ls, s -> StructureDescription( Group( List( s, PermList ) ) ) );
[ "S5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5", 
  "C5", "C5", "C5", "C5", "C5", "C5", "C5", "C5" ]
gap> IsFullPointRegularUnital( u );
false
gap> IsStronglyFullPointRegularUnital( u );
false
gap> ###################################
gap> 
gap> STOP_TEST( "testall.tst", 10000 );

